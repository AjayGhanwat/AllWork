
MainActivity.java

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
package com.example.ajayg.geofencing;

import android.Manifest;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentSender;
import android.content.pm.PackageManager;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

import com.activeandroid.query.Select;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.GeofencingClient;
import com.google.android.gms.location.GeofencingRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MainActivity extends AppCompatActivity implements GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener {

    static List<EnterExit> list;
    static ListAdapter enterExitAdapter;
    static ListView enterExitListView;
    static ArrayList<HashMap<String,String>> enterExits;

    List<Geofence> mGeofences;
    Geofence mGeofence;
    GeofencingClient mGeofencingClient;
    private PendingIntent mGeofenceRequestIntent;
    GoogleApiClient mGoogleApiClient;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        list = new ArrayList<>();
        enterExits =new ArrayList<>();

        enterExitListView = (ListView) findViewById(R.id.enterExitTime);
        Intent i = new Intent(this, GeofenceTransitionsIntentService.class);
        this.startService(i);

        mGeofences = new ArrayList<>();

        if (!isGooglePlayServicesAvailable()) {
            finish();
            return;
        }

        mGeofencingClient = new GeofencingClient(this);

        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(LocationServices.API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .build();

        mGoogleApiClient.connect();

        createGeofences();

        changeData();
    }

    public void createGeofences() {

        mGeofence = new Geofence.Builder()
                .setRequestId("1")
                .setTransitionTypes(Geofence.GEOFENCE_TRANSITION_ENTER | Geofence.GEOFENCE_TRANSITION_EXIT)
                .setCircularRegion(19.050307, 72.918026, 30f)
                .setExpirationDuration(Geofence.NEVER_EXPIRE)
                .build();

        mGeofences.add(mGeofence);
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {
        if (connectionResult.hasResolution()) {
            try {
                connectionResult.startResolutionForResult(this, 1);
            } catch (IntentSender.SendIntentException e) {
                Log.i("Error", "onConnectionFailed: " + e.getMessage());
            }
        }
    }

    @Override
    public void onConnected(Bundle connectionHint) {

        mGeofenceRequestIntent = getGeofenceTransitionPendingIntent();
        try {
            mGeofenceRequestIntent.send();
        } catch (PendingIntent.CanceledException e) {
            e.printStackTrace();
        }

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {

            mGeofencingClient.addGeofences(getGeofencingRequest(), getGeofenceTransitionPendingIntent() )
                    .addOnSuccessListener(this, new OnSuccessListener<Void>() {
                        @Override
                        public void onSuccess(Void aVoid) {
                            Toast.makeText(MainActivity.this, "Added!!", Toast.LENGTH_SHORT).show();
                        }
                    })
                    .addOnFailureListener(this, new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Toast.makeText(MainActivity.this, "Faild!!", Toast.LENGTH_SHORT).show();
                        }
                    });

            LocationServices.GeofencingApi.addGeofences(mGoogleApiClient, mGeofences, mGeofenceRequestIntent);
            Toast.makeText(this, "Started", Toast.LENGTH_SHORT).show();
            //finish();
        }
    }

    @Override
    public void onConnectionSuspended(int i) {
        if (null != mGeofenceRequestIntent) {
            LocationServices.GeofencingApi.removeGeofences(mGoogleApiClient, mGeofenceRequestIntent);
        }
    }

    private boolean isGooglePlayServicesAvailable() {
        int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
        if (ConnectionResult.SUCCESS == resultCode) {
            return true;
        } else {
            return false;
        }
    }

    private GeofencingRequest getGeofencingRequest() {
        GeofencingRequest.Builder builder = new GeofencingRequest.Builder();
//        builder.setInitialTrigger(GeofencingRequest.INITIAL_TRIGGER_ENTER);
        builder.addGeofences(mGeofences);
        return builder.build();
    }

    private PendingIntent getGeofenceTransitionPendingIntent() {
        Intent intent = new Intent(this, GeofenceTransitionsIntentService.class);
        return PendingIntent.getService(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
    }

    private List<EnterExit> getAll() {

        return new Select()
                .from(EnterExit.class)
                .execute();
    }

    public void changeData(){

        list.clear();

        list = getAll();

        HashMap<String, String> enter = new HashMap<>();

        for (int i = 0; i< list.size(); i++) {
            enter.put("Enter", list.get(i).Enter);
            enter.put("Exit", list.get(i).Exit);
            enter.put("Interval", list.get(i).Interval);

            enterExits.add(enter);
        }

        enterExitAdapter = new SimpleAdapter(this,
                enterExits, R.layout.enter_exit_row,
                new String[]{"Enter", "Exit","Interval"},
                new int[]{R.id.enter, R.id.exit, R.id.interval});

        enterExitListView.setAdapter(enterExitAdapter);

        ((BaseAdapter) enterExitListView.getAdapter()).notifyDataSetChanged();

    }
}


GeofenceTransitionsIntentService.java

++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++
package com.example.ajayg.geofencing;

import android.app.Service;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.support.annotation.Nullable;
import android.util.Log;
import android.widget.BaseAdapter;
import android.widget.SimpleAdapter;
import android.widget.Toast;

import com.activeandroid.query.Select;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.GeofencingEvent;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import static com.example.ajayg.geofencing.MainActivity.enterExitAdapter;
import static com.example.ajayg.geofencing.MainActivity.enterExitListView;
import static com.example.ajayg.geofencing.MainActivity.enterExits;
import static com.example.ajayg.geofencing.MainActivity.list;

public class GeofenceTransitionsIntentService extends Service
        implements GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener {
/*
    public GeofenceTransitionsIntentService() {
        super(GeofenceTransitionsIntentService.class.getSimpleName());
    }*/

    @Override
    public void onCreate() {
        super.onCreate();

    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {

        GeofencingEvent geoFenceEvent = GeofencingEvent.fromIntent(intent);
        if (geoFenceEvent.hasError()) {
            int errorCode = geoFenceEvent.getErrorCode();
            Log.e("Error", "Location Services error: " + errorCode);
        } else {

            int transitionType = geoFenceEvent.getGeofenceTransition();
            if (Geofence.GEOFENCE_TRANSITION_ENTER == transitionType) {

                showToast("Enter");
                Date currentTime = Calendar.getInstance().getTime();
                String time = new SimpleDateFormat("hh:mm").format(currentTime);
                showToast(time);
                EnterExit details = null;
                int count = new Select().from(EnterExit.class).execute().size();
                List<EnterExit> data = getAll();
                if (!data.isEmpty())
                details = data.get(data.size()-1);
                if (count == 0 || details.Exit != null) {
                    EnterExit enterExit = new EnterExit();

                    enterExit.Enter = time;
                    enterExit.Exit = null;

                    enterExit.save();

                    changeData();
                }

            } else if (Geofence.GEOFENCE_TRANSITION_EXIT == transitionType) {

                showToast("Exit");
                Date currentTime = Calendar.getInstance().getTime();
                String time = new SimpleDateFormat("hh:mm").format(currentTime);
                showToast(time);

                List<EnterExit> details = getAll();
                EnterExit enterExit = details.get(details.size() - 1);
                enterExit.Exit = time;
                enterExit.save();

                changeData();
            }
        }
        return START_NOT_STICKY;
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {

        return null;
    }

    /*@Override
    protected void onHandleIntent(@Nullable Intent intent) {
        GeofencingEvent geoFenceEvent = GeofencingEvent.fromIntent(intent);
        if (geoFenceEvent.hasError()) {
            int errorCode = geoFenceEvent.getErrorCode();
            Log.e("Error", "Location Services error: " + errorCode);
        } else {

            int transitionType = geoFenceEvent.getGeofenceTransition();
            if (Geofence.GEOFENCE_TRANSITION_ENTER == transitionType) {

                showToast("Enter");

            } else if (Geofence.GEOFENCE_TRANSITION_DWELL == transitionType) {

                showToast("In Geofence");

            } else if (Geofence.GEOFENCE_TRANSITION_EXIT == transitionType) {

                showToast("Exit");

            }
        }
    }*/


    private void showToast(final String msg) {
        Handler mainThread = new Handler(Looper.getMainLooper());
        mainThread.post(new Runnable() {
            @Override
            public void run() {

                Toast.makeText(GeofenceTransitionsIntentService.this, "" + msg, Toast.LENGTH_SHORT).show();
            }
        });
    }

    @Override
    public void onConnected(Bundle connectionHint) {
    }

    @Override
    public void onConnectionSuspended(int cause) {
    }

    @Override
    public void onConnectionFailed(ConnectionResult result) {
    }

    private List<EnterExit> getAll() {

        return new Select()
                .from(EnterExit.class)
                .execute();
    }

    public void changeData() {

        MainActivity.list.clear();

        MainActivity.list = getAll();

        HashMap<String, String> enter = new HashMap<>();

        for (int i = 0; i < MainActivity.list.size(); i++) {
            enter.put("Enter", MainActivity.list.get(i).Enter);
            enter.put("Exit", MainActivity.list.get(i).Exit);
            enter.put("Interval", MainActivity.list.get(i).Interval);

            enterExits.add(enter);
        }

        enterExitAdapter = new SimpleAdapter(this,
                enterExits, R.layout.enter_exit_row,
                new String[]{"Enter", "Exit", "Interval"},
                new int[]{R.id.enter, R.id.exit, R.id.interval});

        MainActivity.enterExitListView.setAdapter(enterExitAdapter);

        ((BaseAdapter) MainActivity.enterExitListView.getAdapter()).notifyDataSetChanged();
       // enterExitListView.getAdapter().notify();
    }
}

